---
// Header component for the landing page
import { clientConfig } from '@/config/client';

// Props for customization
interface Props {
  // Logo image path (optional - falls back to clientConfig.logo.main)
  logo?: string;
  // Business name (optional - falls back to clientConfig.businessName)  
  businessName?: string;
  // Background color for the header (optional)
  bgColor?: string;
  // Text color for the links (optional)
  textColor?: string;
  // Hover color for the links (optional)
  hoverColor?: string;
  // Whether to show the fonts link (optional)
  showFontsLink?: boolean;
}

// Default values for props with clientConfig fallbacks
const {
  logo = clientConfig.logo.main,
  businessName = clientConfig.businessName,
  bgColor = 'bg-white/90',
  textColor = 'text-gray-700',
  hoverColor = 'text-primary-500',
  showFontsLink = true,
} = Astro.props;
---

<header class={`sticky top-0 z-50 w-full ${bgColor} backdrop-blur-sm shadow-sm`} id="top">
  <div class="container mx-auto px-4 py-4 flex justify-between items-center">
    <!-- Logo -->
    <div class="flex items-center">
      <a href="#top" class="flex items-center space-x-3">
        {logo ? (
          <img 
            src={logo} 
            alt={clientConfig.logo.altText} 
            class="h-8 w-auto" 
          />
        ) : null}
        <span class="text-xl font-bold text-gray-900">
          {businessName}
        </span>
      </a>
    </div>

    <!-- Navigation -->
    <nav class="hidden md:flex space-x-8">
      <a href="#top" class={`${textColor} hover:${hoverColor} transition-colors`}>Home</a>
      <a href="#features" class={`${textColor} hover:${hoverColor} transition-colors`}>Features</a>
      <a href="#pricing" class={`${textColor} hover:${hoverColor} transition-colors`}>Pricing</a>
      <a href="#testimonials" class={`${textColor} hover:${hoverColor} transition-colors`}>Testimonials</a>
      <a href="#contact" class={`${textColor} hover:${hoverColor} transition-colors`}>Contact</a>
      {showFontsLink && <a href="/font-demo" class={`${textColor} hover:${hoverColor} transition-colors`}>Fonts</a>}
    </nav>

    <!-- CTA Button -->
    <div class="hidden md:block">
      <a href="#contact" class="btn btn-primary">Get Started</a>
    </div>

    <!-- Mobile Menu Button -->
    <button id="mobile-menu-button" class="md:hidden text-gray-700 focus:outline-none">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
      </svg>
    </button>
  </div>

  <!-- Mobile Menu -->
  <div id="mobile-menu" class={`hidden md:hidden ${bgColor.replace('/90', '')} w-full border-t`}>
    <div class="container mx-auto px-4 py-3 flex flex-col space-y-3">
      <a href="#top" class={`${textColor} hover:${hoverColor} py-2 transition-colors`}>Home</a>
      <a href="#features" class={`${textColor} hover:${hoverColor} py-2 transition-colors`}>Features</a>
      <a href="#pricing" class={`${textColor} hover:${hoverColor} py-2 transition-colors`}>Pricing</a>
      <a href="#testimonials" class={`${textColor} hover:${hoverColor} py-2 transition-colors`}>Testimonials</a>
      <a href="#contact" class={`${textColor} hover:${hoverColor} py-2 transition-colors`}>Contact</a>
      {showFontsLink && <a href="/font-demo" class={`${textColor} hover:${hoverColor} py-2 transition-colors`}>Fonts</a>}
      <a href="#contact" class="btn btn-primary w-full text-center">Get Started</a>
    </div>
  </div>
</header>

<script>
  // Mobile menu toggle and smooth scrolling
  document.addEventListener('DOMContentLoaded', () => {
    // Mobile menu toggle
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');

    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', () => {
        mobileMenu.classList.toggle('hidden');
      });
    }

    // Smooth scrolling for all anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function(this: HTMLAnchorElement, e: Event) {
        e.preventDefault();
        
        // Close mobile menu if open
        if (mobileMenu && !mobileMenu.classList.contains('hidden')) {
          mobileMenu.classList.add('hidden');
        }

        // Handle special case for #top
        const href = this.getAttribute('href');
        if (href === '#top') {
          window.scrollTo({
            top: 0,
            behavior: 'smooth'
          });
          return;
        }

        // For all other anchor links
        const targetId = href;
        const targetElement = document.querySelector(targetId);
        
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
          
          // Update URL without page reload
          history.pushState({}, '', targetId);
        }
      });
    });
  });
</script>
