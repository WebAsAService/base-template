---
/**
 * Example Hero Section using Dynamic Client Configuration
 * 
 * This demonstrates how to use the new configuration system
 * to replace hardcoded content with dynamic, AI-configurable content.
 * 
 * Usage:
 * import ConfigDrivenHero from '@components/examples/ConfigDrivenHero.astro';
 */
import { clientConfig, getConfigValue, isSectionEnabled } from '@config/client.js';

// Get hero section configuration with fallbacks
const hero = clientConfig.sections.hero;
const businessName = clientConfig.businessName;
const themeClass = clientConfig.themeClass;

// Check if hero section is properly configured
const isHeroEnabled = isSectionEnabled('hero');

// Fallback values using helper function
const headline = getConfigValue('sections.hero.headline', 'Welcome to Our Business');
const subheadline = getConfigValue('sections.hero.subheadline', 'We provide exceptional services');
---

{isHeroEnabled && (
  <section class="py-20 bg-gradient-to-r from-primary-50 to-secondary-50">
    <div class="container mx-auto px-4">
      <div class="flex flex-col md:flex-row items-center">
        <!-- Left content - Text -->
        <div class="md:w-1/2 mb-10 md:mb-0 md:pr-10">
          <h1 class="text-4xl md:text-5xl lg:text-6xl font-bold leading-tight mb-6">
            {headline}
          </h1>
          <p class="text-xl text-gray-600 mb-8">
            {subheadline}
          </p>
          <div class="flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4">
            <a 
              href={hero.cta.primary.link} 
              class={`btn btn-${hero.cta.primary.style}`}
            >
              {hero.cta.primary.text}
            </a>
            <a 
              href={hero.cta.secondary.link} 
              class={`btn btn-${hero.cta.secondary.style}`}
            >
              {hero.cta.secondary.text}
            </a>
          </div>
        </div>
        
        <!-- Right content - Image -->
        <div class="md:w-1/2">
          <div class="relative">
            <!-- Main image -->
            <div class="rounded-lg shadow-xl overflow-hidden">
              <img 
                src={hero.media.src}
                alt={hero.media.alt}
                class="w-full h-auto"
              />
            </div>
            
            <!-- Decorative elements -->
            <div class="absolute -bottom-6 -left-6 w-24 h-24 bg-primary-500 rounded-lg opacity-20"></div>
            <div class="absolute -top-6 -right-6 w-32 h-32 bg-secondary-500 rounded-full opacity-20"></div>
          </div>
        </div>
      </div>
      
      <!-- Trusted by section (if enabled) -->
      {hero.trustedBy.enabled && (
        <div class="mt-20 text-center">
          <p class="text-gray-500 mb-8">{hero.trustedBy.title}</p>
          <div class="flex flex-wrap justify-center items-center gap-8 opacity-70">
            {hero.trustedBy.logos.map(logo => (
              <img 
                src={logo.src} 
                alt={logo.alt} 
                style={`height: ${logo.height}`}
                class="grayscale hover:grayscale-0 transition-all duration-300"
              />
            ))}
          </div>
        </div>
      )}
    </div>
  </section>
)}

{/* Show fallback message if hero section is not configured */}
{!isHeroEnabled && (
  <section class="py-20 bg-gray-100">
    <div class="container mx-auto px-4 text-center">
      <h2 class="text-2xl font-bold text-gray-600 mb-4">Hero Section</h2>
      <p class="text-gray-500">Configure your hero section in the client configuration to display content here.</p>
    </div>
  </section>
)}

<style>
  /* Component-specific styles can go here */
  .btn {
    @apply px-6 py-3 rounded-md font-semibold transition-all duration-300;
  }
  
  .btn-primary {
    @apply bg-primary-600 text-white hover:bg-primary-700;
  }
  
  .btn-outline {
    @apply border-2 border-primary-600 text-primary-600 hover:bg-primary-600 hover:text-white;
  }
  
  .btn-secondary {
    @apply bg-secondary-600 text-white hover:bg-secondary-700;
  }
</style>