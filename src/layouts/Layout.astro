---
// Import client configuration for dynamic content
import { clientConfig } from '@/config/client';

// Define props for the Layout component
interface Props {
  title?: string;
  description?: string;
  clientTheme?: string;
}

// Set default values from clientConfig
const { 
  title = clientConfig.businessName,
  description = clientConfig.seo.description,
  clientTheme = clientConfig.themeClass
} = Astro.props;

// Check for theme override from URL parameters
const themeParam = Astro.url.searchParams.get('theme');
const finalTheme = themeParam || clientTheme || '';

// Create complete page title with template
const pageTitle = title === clientConfig.businessName 
  ? title 
  : clientConfig.seo.titleTemplate.replace('%s', title);

// Construct absolute URLs for meta tags
const currentUrl = new URL(Astro.request.url);
const canonicalUrl = currentUrl.href;
const ogImage = new URL(clientConfig.seo.openGraph.image, currentUrl.origin).href;

// Schema.org structured data for business
const businessSchema = JSON.stringify({
  "@context": "https://schema.org",
  "@type": "Organization",
  "name": clientConfig.businessName,
  "description": clientConfig.description,
  "url": clientConfig.website.domain,
  "foundingDate": clientConfig.foundedYear.toString(),
  "logo": new URL(clientConfig.logo.main, currentUrl.origin).href,
  "contactPoint": {
    "@type": "ContactPoint",
    "telephone": clientConfig.contact.phone,
    "contactType": "customer service",
    "email": clientConfig.contact.email
  },
  "address": {
    "@type": "PostalAddress",
    "streetAddress": clientConfig.contact.address.street,
    "addressLocality": clientConfig.contact.address.city,
    "addressRegion": clientConfig.contact.address.state,
    "postalCode": clientConfig.contact.address.zipCode,
    "addressCountry": clientConfig.contact.address.country
  },
  "sameAs": Object.values(clientConfig.social).filter(url => url)
});

// Import global styles
import "../styles/global.css";
---

<!doctype html>
<html lang="en" class={finalTheme}>
	<head>
		<!-- Basic Meta Tags -->
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="description" content={description} />
		<meta name="keywords" content={clientConfig.seo.keywords.join(', ')} />
		<meta name="author" content={clientConfig.businessName} />
		<meta name="generator" content={Astro.generator} />
		
		<!-- Canonical URL -->
		<link rel="canonical" href={canonicalUrl} />
		
		<!-- Favicons and Icons -->
		<link rel="icon" type="image/svg+xml" href={clientConfig.logo.favicon} />
		<link rel="apple-touch-icon" href={clientConfig.logo.main} />
		
		<!-- Page Title -->
		<title>{pageTitle}</title>
		
		<!-- Open Graph Meta Tags -->
		<meta property="og:title" content={pageTitle} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={ogImage} />
		<meta property="og:image:alt" content={clientConfig.seo.openGraph.imageAlt} />
		<meta property="og:url" content={canonicalUrl} />
		<meta property="og:type" content={clientConfig.seo.openGraph.type} />
		<meta property="og:site_name" content={clientConfig.seo.openGraph.siteName} />
		
		<!-- Twitter Card Meta Tags -->
		<meta name="twitter:card" content={clientConfig.seo.twitter.card} />
		<meta name="twitter:site" content={clientConfig.seo.twitter.site} />
		<meta name="twitter:creator" content={clientConfig.seo.twitter.creator} />
		<meta name="twitter:title" content={pageTitle} />
		<meta name="twitter:description" content={description} />
		<meta name="twitter:image" content={ogImage} />
		<meta name="twitter:image:alt" content={clientConfig.seo.openGraph.imageAlt} />
		
		<!-- Structured Data (Schema.org) -->
		<script type="application/ld+json" set:html={businessSchema} />
		
		<!-- Additional SEO Meta Tags -->
		<meta name="robots" content="index, follow" />
		<meta name="language" content="en" />
		<meta name="theme-color" content={clientConfig.colors.primary} />
		
		<style>
			/* Ensure the theme class is applied to the entire document */
			body {
				min-height: 100vh;
			}
		</style>
		
		<script>
			// Client-side theme handling for URL parameters
			(function() {
				const urlParams = new URLSearchParams(window.location.search);
				const themeParam = urlParams.get('theme');
				
				if (themeParam) {
					// Remove any existing theme classes
					document.documentElement.className = document.documentElement.className
						.replace(/theme-[\w-]+/g, '').trim();
					document.body.className = document.body.className
						.replace(/theme-[\w-]+/g, '').trim();
					
					// Add the new theme class
					document.documentElement.classList.add(themeParam);
					document.body.classList.add(themeParam);
				}
			})();
		</script>
	</head>
	<body class={finalTheme}>
		<slot />
	</body>
</html>
